using System;
using System.Collections.Generic;
using Microsoft.SharePoint.Client;
using System.IdentityModel.Tokens;
using Microsoft.IdentityModel.S2S.Tokens;

using SharePointProviderHostedApi.Types;

namespace SharePointProviderHostedApi.Token
{
    /// <summary>
    /// A JsonWebSecurityToken generated by SharePoint to authenticate to a 3rd party application and allow callbacks using a refresh token
    /// </summary>
    internal sealed class SharePointContextToken : JsonWebSecurityToken
    {
        private static string GetClaimValue(JsonWebSecurityToken token, ClaimType claimType)
        {
            if (token == null)
            {
                throw new ArgumentNullException("token");
            }

            foreach (JsonWebTokenClaim claim in token.Claims)
            {
                if (StringComparer.Ordinal.Equals(claim.ClaimType, claimType.ToString()))
                {
                    return claim.Value;
                }
            }

            return null;
        }

        internal static SharePointContextToken Create(JsonWebSecurityToken contextToken)
        {
            return new SharePointContextToken(contextToken.Issuer, contextToken.Audience, contextToken.ValidFrom, contextToken.ValidTo, contextToken.Claims);
        }

        internal SharePointContextToken(string issuer, string audience, DateTime validFrom, DateTime validTo, IEnumerable<JsonWebTokenClaim> claims)
            : base(issuer, audience, validFrom, validTo, claims)
        {
        }

        internal SharePointContextToken(string issuer, string audience, DateTime validFrom, DateTime validTo, IEnumerable<JsonWebTokenClaim> claims, SecurityToken issuerToken, JsonWebSecurityToken actorToken)
            : base(issuer, audience, validFrom, validTo, claims, issuerToken, actorToken)
        {
        }

        internal SharePointContextToken(string issuer, string audience, DateTime validFrom, DateTime validTo, IEnumerable<JsonWebTokenClaim> claims, SigningCredentials signingCredentials)
            : base(issuer, audience, validFrom, validTo, claims, signingCredentials)
        {
        }

        internal string NameId
        {
            get
            {
                return GetClaimValue(this, ClaimType.nameid);
            }
        }

        /// <summary>
        /// The principal name portion of the context token's "appctxsender" claim
        /// </summary>
        internal string TargetPrincipalName
        {
            get
            {
                string appctxsender = GetClaimValue(this, ClaimType.appctxsender);

                if (appctxsender == null)
                {
                    return null;
                }

                return appctxsender.Split('@')[0];
            }
        }

        /// <summary>
        /// The context token's "refreshtoken" claim
        /// </summary>
        internal string RefreshToken
        {
            get
            {
                return GetClaimValue(this, ClaimType.refreshtoken);
            }
        }

        /// <summary>
        /// The context token's "CacheKey" claim
        /// </summary>
        internal string CacheKey
        {
            get
            {
                string appctx = GetClaimValue(this, ClaimType.appctx);
                if (appctx == null)
                {
                    return null;
                }

                ClientContext ctx = new ClientContext("http://tempuri");
                Dictionary<string, object> dict = (Dictionary<string, object>)ctx.ParseObjectFromJsonString(appctx);
                string cacheKey = (string)dict[ShpContextDictionary.CacheKey.ToString()];

                return cacheKey;
            }
        }

        /// <summary>
        /// The context token's "SecurityTokenServiceUri" claim
        /// </summary>
        internal string SecurityTokenServiceUri
        {
            get
            {
                string appctx = GetClaimValue(this, ClaimType.appctx);
                if (appctx == null)
                {
                    return null;
                }

                ClientContext ctx = new ClientContext("http://tempuri");
                Dictionary<string, object> dict = (Dictionary<string, object>)ctx.ParseObjectFromJsonString(appctx);
                string securityTokenServiceUri = (string)dict[ShpContextDictionary.SecurityTokenServiceUri.ToString()];

                return securityTokenServiceUri;
            }
        }

        /// <summary>
        /// The realm portion of the context token's "audience" claim
        /// </summary>
        internal string Realm
        {
            get
            {
                string aud = Audience;
                if (aud == null)
                {
                    return null;
                }

                string tokenRealm = aud.Substring(aud.IndexOf('@') + 1);

                return tokenRealm;
            }
        }        
    }
}